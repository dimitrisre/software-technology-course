#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "grid.h"



Grid_T sudoku_read(void){
	Grid_T *s=(Grid_T *)malloc(1*sizeof(Grid_T));
	int i=0,j=0,el;
	while((el=getchar())!=EOF)
	{
		if(el>='0' && el<='9'){
			grid_update_value(s, i, j, el-'0');
			j++;
		}
		else if(el=='\n'){
		    i++;
		    j=0;
		}
	}
	return *s;

}

void sudoku_print(FILE *s, Grid_T g)
{
	int i,j;
	for(i=0;i<9;i++)
	{
		for(j=0;j<9;j++)
		{
			fprintf(s,"%d ",grid_read_value(g, i, j));
		}
		fprintf(s,"\n");
	}
}

int sudoku_check_line(Grid_T g, int i, int j, int val)
{
	int k;
	for(k=0;k<9;k++)
	{
		if(val!=-1)
		{
			if(grid_read_value(g,i,k)==val)
				return 1; // ara yparxei mesa sthn grammh h timh pou 8eloume na dwsoume
			else 
				continue;
		}
		if (grid_read_value(g,i,j)==grid_read_value(g,i,k)&& (k!=j))
			return 1; //an yparxei sth grammh 3ana to idio stoixeio
	}
	return 0;
}

int sudoku_check_col(Grid_T g, int i, int j, int val)
{       int k;
        for(k=0;k<9;k++)
        {
		if(val!=-1)
                { 
                        if(grid_read_value(g,k,j)==val)
                                return 1; // ara yparxei mesa sthn grammh h timh
                        else 
                                continue;
                }

                if (grid_read_value(g,i,j)==grid_read_value(g,k,j)&& (k!=i))
                        return 1; //an yparxei sth grammh 3ana to idio stoixeio
        }
        return 0;
}

int which_grid(Grid_T g,int j)
{
	if(j<3)
		return 0; // anhkei sta grid tis prwths sthlhs
	else if(j<6)
		return 3; //anhkei sta grid ths 2 sthlhs
	else
		return 6; // anhkei sta grid ths 3 sthlhs
}

int sudoku_check_grid(Grid_T g, int i, int j,int val)
{
	int arxh_sthlhs=which_grid(g,j);
	int row,col;
	if(i<3)
	{
        	for(row=0;row<3;row++)
        	{
			for(col=arxh_sthlhs;col<col+3;col++)// me ayto tn tropo briskw to stwstop grip analoga me thn sthlh
			{
                		if(val!=-1)
                		{
                        		if(grid_read_value(g,row,col)==val)
                                		return 1; // ara yparxei 
                        		else
                                		continue;
                		}

	        	        if (grid_read_value(g,i,j)==grid_read_value(g,row,col)&& (row!=i && col!=j))
		                        return 1;
			}
        	}
	}
	else if(i<6)
        {
                for(row=3;row<6;row++)
                {
                        for(col=arxh_sthlhs;col<col+3;col++)// me ayto tn tropo briskw to stwstop$
                        {
                                if(val!=-1)
                                {
                                        if(grid_read_value(g,row,col)==val)
                                                return 1; // ara yparxei 
                                        else
                                                continue;
                                }

                                if (grid_read_value(g,i,j)==grid_read_value(g,row,col)&& (row!=i&& col!=j))
                                        return 1; //an yparxei sth grammh                    }
                }
        }
	else
        {
                for(row=6;row<9;row++)
                {
                        for(col=arxh_sthlhs;col<col+3;col++)// me ayto tn tropo briskw to stwstop$
                        {
                                if(val!=-1)
                                {
                                        if(grid_read_value(g,row,col)==val)
                                                return 1; // ara yparxei mesa sthn grammh h timh
                                        else
                                                continue;
                                }

                                if (grid_read_value(g,i,j)==grid_read_value(g,row,col)&& (k!=i))
                                        return 1; //an yparxei sth grammh 3ana to idio stoixeio
                        }
                }
        }

        return 0;
}

void sudoku_print_errors(Grid_T g)
{
	int i,j,row,col,grid;
	for(i=0;i<9;i++)
	{
		for(j=0;j<9;j++)
		{
			row=sudoku_check_line(g,i,j,-1);
			if(row==1)
				printf("error: yparxei 3ana o ari8mos %d sthn grammh %d\n",grid_read_value(g,i,j),i);
			col=sudoku_check_col(g, i,j,-1);
			if(col==1)
				printf("error: yparxei 3ana o ari8mos %d sthn sthlh %d\n",grid_read_value(g,i,j),j);
			grid=sudoku_check_grid( g, i,j,-1);
			if(grid==1)
				printf("error: yparxei 3ana o ari8mos %d sto grid pou anhkei\n", grid_read_value(g,i,j));

		}
	}
}

int sudoku_is_correct(Grid_T g)
{
// na kanw me paromoio tropo tous elegxous kai na epistrefw 1 an einai swsto olo to puzzle
}




/*static*/void sudoku_init_choices(Grid_T *g){
	int i,j,k;
	for(i=0;i<9;i++)
	{
		for(j=0;j<9;j++)
		{
			if(grid_read_value( *g, i,j)==0)
			{
				grid_set_count(g, i, j);
				for(k=1;k<10;k++)
				{
					if( sudoku_check_line(*g, i, j,k)==1)
					{
						grid_remove_choice(g, i, j,k);
						continue;
					}
					if( sudoku_check_col(*g, i, j,k)==1)
                                        {
                                                grid_remove_choice(g, i, j,k);
                                                continue;
                                        }
					// na to kanw ayto kai gia to check_grid
					grid_set_choice(g, i, j,k);
				}
			}

		}
	}
}


void print_choices(Grid_T g){
	int i,j,k;

	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			printf("(%d,%d)=%d [",i,j,g.elts[i][j].choices.count);
			for(k=1; k<10; k++){
				printf("%d,",g.elts[i][j].choices.num[k]);
			}
			printf("]\n");
		}
	}

}
/*static */int sudoku_try_next(Grid_T g, int *row, int *col)
{
	int i,j,found=0, ran=0,k,counter=-1;
	for(i=*row;i<9;i++)
	{
		for(j=*col;j<9;j++)
		{
			if(grid_read_value( g, i, j)==0)
			{
				*row=i;
				*col=j;
				found=1;
				break;
			}
		}
		if(found==1)
			break;
	}
	if(found == 0)
	{
		*row = -1;
		*col = -1;
		return -1;
	}
	ran=rand()%grid_read_count( g, i, j);
	for(k=1;k<10;k++)
	{
		if(grid_choice_is_valid( g, i, j, k)==1)
		{
			counter++;
			if(counter==ran)
			{
				printf("%d,%d=%d\n",i,j,k);
				return k;
			}
		}
	}

}

/*Grid_T sudoku_solve(Grid_T g, int *is_solved)
{
	int r=0,c=0,choice,yphrxan;

	if(*is_solved==1)
		return g;
	sudoku_init_choices(&g);
	choice=sudoku_try_next(g,&r,&c);
	if(choice==-1)
	{
		*is_solved=1;
		return g;
	}
	grid_update_value(&g,r,c,choice);
	yphrxan=sudoku_update_choice(&g,r,c,choice);

	
}*/
